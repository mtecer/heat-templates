get_attr:
  - <resource name>
  - <attribute name>
  - <key/index 1> (optional)
  - <key/index 2> (optional)
  - ...
#######################################
resources:
  my_instance:
    type: OS::Nova::Server

outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, first_address] }
  instance_private_ip:
    description: Private IP address of the deployed compute instance
   value: { get_attr: [my_instance, networks, private, 0] }
#######################################
resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        get_file: my_instance_user_data.sh
  my_other_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        get_file: http://example.com/my_other_instance_user_data.sh
#######################################
parameters:
  instance_type:
    type: string
    label: Instance Type
    description: Instance type to be used.
  server_data:
    type: json
# {"instance_type": "m1.tiny",
# {"server_data": {"metadata": {"foo": "bar"},
#                  "keys": ["a_key","other_key"]}}}
resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type}
      metadata: { get_param: [ server_data, metadata ] }
      key_name: { get_param: [ server_data, keys, 0 ] }
# then the value of the property flavor would resolve to m1.tiny,
# metadata would resolve to {"foo": "bar"} and key_name would resolve to a_key.
#######################################
resources:
  instance_port:
    type: OS::Neutron::Port
    properties: ...

  instance:
    type: OS::Nova::Server
    properties:
      ...
      networks:
        port: { get_resource: instance_port }
#######################################
list_join: [', ', ['one', 'two', 'and three']]
#######################################
# from a user supplied parameter
pwd_hash: { digest: ['sha512', { get_param: raw_password }] }
#######################################
parameters:
  ports:
    type: comma_delimited_list
    label: ports
    default: "80,443,8080"

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: web_server_security_group
      rules:
        repeat:
          for_each:
            %port%: { get_param: ports }
          template:
            protocol: tcp
            port_range_min: %port%
            port_range_max: %port%
#######################################
parameters:
  ports:
    type: comma_delimited_list
    label: ports
    default: "80,443,8080"
  protocols:
    type: comma_delimited_list
    label: protocols
    default: "tcp,udp"

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: web_server_security_group
      rules:
        repeat:
          for_each:
            %port%: { get_param: ports }
            %protocol%: { get_param: protocols }
          template:
            protocol: %protocol%
            port_range_min: %port%
#######################################
resources:
  my_instance:
    type: OS::Nova::Server
    # general metadata and properties ...

outputs:
  Login_URL:
    description: The URL to log into the deployed application
    value:
      str_replace:
        template: http://host/MyApplication
        params:
          host: { get_attr: [ my_instance, first_address ] }
#######################################
parameters:
  DBRootPassword:
    type: string
    label: Database Password
    description: Root password for MySQL
    hidden: true

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "Hello world"
            echo "Setting MySQL root password"
            mysqladmin -u root password $db_rootpassword
            # do more things ...
          params:
            $db_rootpassword: { get_param: DBRootPassword }
#######################################
str_split: [',', 'string,to,split']       # ['string', 'to', 'split']
#######################################
str_split: [',', 'string,to,split', 0]    # 'string'
#######################################
# This resolves to a map containing {'k1': 'v2', 'k2': 'v2'}.
map_merge: [{'k1': 'v1', 'k2': 'v2'}, {'k1': 'v2'}]
#######################################
