heat_template_version: 2015-10-15
###################################################################
# The example is designed to demo how software deployment to handle
# dependencies.
#
# The scenario:
#  deployment_c -- hosted on --> server_a
#  | (explicit depends on via depends_on property)
#  deployment_b -- hosted on --> server_b
#  | (implicit depends on via get_attr in input_values property)
#  deployment_a -- hosted on --> server_a
#
# So the right deployment sequence should be:
#  deployment_a (server_a)
#  -->
#  deployment_b (server_b)
#  -->
#  deployment_c (back to server_a)
#
# How to deploy the sample:
#
# 1. Create on image with element heat-config-script in
# 2. heat stack-create -f example-deploy-sequence.yaml sequence
# 3. heat stack-show sequence
###################################################################

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for Instance
    constraints:
      - custom_constraint: nova.keypair
  image_id:
    type: string
    label: Image ID
    description: Image to be used for Instance
    constraints:
      - custom_constraint: glance.image
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  network:
    label: Network - eth0
    type: string
    description: Primary Network for the Instance
    constraints:
      - custom_constraint: neutron.network

resources:
  config:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
      - name: previous
        default: 'NONE'
      group: script
      config: |
        #!/bin/bash
        echo "Previous: $previous"
        echo "${deploy_resource_name} is running on $(hostname) at $(date)"

  deployment_a:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: instance_a

  deployment_b:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        previous:
          get_attr: [deployment_a, deploy_stdout]
      config:
        get_resource: config
      server:
        get_resource: instance_b

  deployment_c:
    type: OS::Heat::SoftwareDeployment
    depends_on: deployment_b
    properties:
      input_values:
        previous: 'deployment_b'
      config:
        get_resource: config
      server:
        get_resource: instance_a

# Instance A
  os_volume_a:
    type: OS::Cinder::Volume
    properties:
      size: 10
      image: { get_param: image_id }

  network_port_a:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - default

  instance_a:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: network_port_a }
      block_device_mapping_v2:
        - device_name: sda
          volume_id: { get_resource: os_volume_a }
          delete_on_termination: true
      user_data_format: SOFTWARE_CONFIG
      # user_data:
      #   get_file: /Users/mtecer/OpenStack/heat/deployment/importCAcert.sh

# Instance B
  os_volume_b:
    type: OS::Cinder::Volume
    properties:
      size: 10
      image: { get_param: image_id }

  network_port_b:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - default

  instance_b:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: network_port_b }
      block_device_mapping_v2:
        - device_name: sda
          volume_id: { get_resource: os_volume_b }
          delete_on_termination: true
      user_data_format: SOFTWARE_CONFIG
      # user_data:
      #   get_file: /Users/mtecer/OpenStack/heat/deployment/importCAcert.sh

outputs:
  deployment_a_stdout:
    value:
      get_attr: [deployment_a, deploy_stdout]
  deployment_b_stdout:
    value:
      get_attr: [deployment_b, deploy_stdout]
  deployment_c_stdout:
    value:
      get_attr: [deployment_c, deploy_stdout]
