heat_template_version: 2015-10-15

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for Instance
    constraints:
      - custom_constraint: nova.keypair
  image_id:
    type: string
    label: Image ID
    description: Image to be used for Instance
    constraints:
      - custom_constraint: glance.image
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  network:
    label: Network - eth0
    type: string
    description: Primary Network for the Instance
    constraints:
      - custom_constraint: neutron.network

resources:
  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: foo
      - name: bar
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Writing to /tmp/$bar"
        echo $foo > /tmp/$bar
        echo -n "The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action" > $heat_outputs_path.result
        echo "Written to /tmp/$bar"
        echo "Output to stderr" 1>&2
# status_code   No description given
# result        No description given
#               The file /tmp/baaaaa contains fooooo for server dbdb737f-2317-4286-a04e-dd7ca5362da1 during CREATE
# stderr        No description given
#               + echo 'Writing to /tmp/baaaaa'
#               + echo fooooo
#               ++ cat /tmp/baaaaa
#               + echo -n 'The file /tmp/baaaaa contains fooooo for server dbdb737f-2317-4286-a04e-dd7ca5362da1 during CREATE'
#               + echo 'Written to /tmp/baaaaa'
#               + echo 'Output to stderr'
#               Output to stderr
# stdout        No description given
#               Writing to /tmp/baaaaa
#               Written to /tmp/baaaaa

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: instance
      input_values:
        foo: fooooo
        bar: baaaaa

# Instance A
  os_volume:
    type: OS::Cinder::Volume
    properties:
      size: 10
      image: { get_param: image_id }

  network_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - default

  instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: network_port }
      block_device_mapping_v2:
        - device_name: sda
          volume_id: { get_resource: os_volume }
          delete_on_termination: true
      user_data_format: SOFTWARE_CONFIG

outputs:
  result:
    value:
      get_attr: [deployment, result]
  stdout:
    value:
      get_attr: [deployment, deploy_stdout]
  stderr:
    value:
      get_attr: [deployment, deploy_stderr]
  status_code:
    value:
      get_attr: [deployment, deploy_status_code]
